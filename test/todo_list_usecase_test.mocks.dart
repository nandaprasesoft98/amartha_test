// Mocks generated by Mockito 5.3.2 from annotations
// in amartha_test/test/todo_list_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:amartha_test/data/datasource/tododatasource/todo_data_source.dart'
    as _i3;
import 'package:amartha_test/domain/entity/add_todo_list_parameter.dart' as _i6;
import 'package:amartha_test/domain/entity/change_todo_list_parameter.dart'
    as _i7;
import 'package:amartha_test/domain/entity/get_todo_list_parameter.dart' as _i5;
import 'package:amartha_test/domain/entity/mark_todo_list_parameter.dart'
    as _i9;
import 'package:amartha_test/domain/entity/remove_todo_list_parameter.dart'
    as _i8;
import 'package:amartha_test/domain/entity/todo.dart' as _i4;
import 'package:amartha_test/misc/processing/future_processing.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFutureProcessing_0<T> extends _i1.SmartFake
    implements _i2.FutureProcessing<T> {
  _FakeFutureProcessing_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoDataSource extends _i1.Mock implements _i3.TodoDataSource {
  MockTodoDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FutureProcessing<List<_i4.Todo>> getTodoList(
          _i5.GetTodoListParameter? getTodoListParameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodoList,
          [getTodoListParameter],
        ),
        returnValue: _FakeFutureProcessing_0<List<_i4.Todo>>(
          this,
          Invocation.method(
            #getTodoList,
            [getTodoListParameter],
          ),
        ),
      ) as _i2.FutureProcessing<List<_i4.Todo>>);
  @override
  _i2.FutureProcessing<bool> addTodoList(
          _i6.AddTodoListParameter? addTodoListParameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodoList,
          [addTodoListParameter],
        ),
        returnValue: _FakeFutureProcessing_0<bool>(
          this,
          Invocation.method(
            #addTodoList,
            [addTodoListParameter],
          ),
        ),
      ) as _i2.FutureProcessing<bool>);
  @override
  _i2.FutureProcessing<bool> changeTodoList(
          _i7.ChangeTodoListParameter? changeTodoListParameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeTodoList,
          [changeTodoListParameter],
        ),
        returnValue: _FakeFutureProcessing_0<bool>(
          this,
          Invocation.method(
            #changeTodoList,
            [changeTodoListParameter],
          ),
        ),
      ) as _i2.FutureProcessing<bool>);
  @override
  _i2.FutureProcessing<bool> removeTodoList(
          _i8.RemoveTodoListParameter? deleteTodoListParameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTodoList,
          [deleteTodoListParameter],
        ),
        returnValue: _FakeFutureProcessing_0<bool>(
          this,
          Invocation.method(
            #removeTodoList,
            [deleteTodoListParameter],
          ),
        ),
      ) as _i2.FutureProcessing<bool>);
  @override
  _i2.FutureProcessing<bool> markTodoList(
          _i9.MarkTodoListParameter? markTodoListParameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #markTodoList,
          [markTodoListParameter],
        ),
        returnValue: _FakeFutureProcessing_0<bool>(
          this,
          Invocation.method(
            #markTodoList,
            [markTodoListParameter],
          ),
        ),
      ) as _i2.FutureProcessing<bool>);
}
